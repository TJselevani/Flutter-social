// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'package:social/models/videos.model.dart';

class ExplorePage extends StatefulWidget {
  const ExplorePage({super.key});

  @override
  State<ExplorePage> createState() => _ExplorePageState();
}

class _ExplorePageState extends State<ExplorePage> {
  late TextEditingController _searchController;
  late Future<List<VideoModel>> _videosFuture;
  late List<VideoPlayerController> _videoControllers;
  late List<VideoModel> _videos;

  @override
  void initState() {
    super.initState();
    _searchController = TextEditingController();
    _videosFuture = _fetchVideos();
    _videoControllers = [];
  }

  @override
  void dispose() {
    _searchController.dispose();
    for (var controller in _videoControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  Future<List<VideoModel>> _fetchVideos() async {
    // Fetch videos from VideoModel service.
    return VideoModel.getVideos();
  }

  void _filterVideos(String query) {
    if (query.isNotEmpty) {
      setState(() {
        _videos = _videos
            .where((video) =>
                video.title.contains(query) || video.username.contains(query))
            .toList();
      });
    } else {
      setState(() {
        _videosFuture = _fetchVideos();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            _buildSearchBar(),
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: Align(
                alignment: Alignment.topLeft,
                child: Text(
                  'Explore',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
              ),
            ),
            Expanded(
              child: FutureBuilder<List<VideoModel>>(
                future: _videosFuture,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Center(
                      child: Text(
                        'Error loading videos: ${snapshot.error}. Please try again later.',
                        style: const TextStyle(color: Colors.red),
                      ),
                    );
                  } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                    return const Center(child: Text('No videos available.'));
                  }

                  _videos = snapshot.data!;
                  _videoControllers = _videos.map((video) {
                    final controller = VideoPlayerController.asset(video.url);
                    controller.initialize().then((_) {
                      setState(() {});
                    });
                    return controller;
                  }).toList();

                  return ListView.builder(
                    shrinkWrap: true,
                    padding: const EdgeInsets.all(8.0),
                    itemCount: _videos.length,
                    itemBuilder: (context, index) {
                      final videoController = _videoControllers[index];
                      return ListTile(
                        leading: const Icon(Icons.list),
                        onTap: () {
                          // When tapped, play or pause the video
                          if (videoController.value.isPlaying) {
                            videoController.pause();
                          } else {
                            videoController.play();
                          }
                        },
                        title: VideoCard(
                          video: _videos[index],
                          videoController: videoController,
                        ),
                      );
                      // return VideoCard(
                      //   video: _videos[index],
                      //   videoController: _videoControllers[index],
                      // );
                    },
                  );
                },
              ),
            ),
            _buildBottomNavigationBar(),
          ],
        ),
      ),
    );
  }

  Widget _buildSearchBar() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Row(
        children: [
          const CircleAvatar(
            backgroundImage: AssetImage('assets/images/win.jpg'),
            radius: 30,
          ),
          const SizedBox(width: 10),
          Expanded(
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: 'Search...',
                prefixIcon: const Icon(Icons.search),
                suffixIcon: IconButton(
                  icon: const Icon(Icons.clear),
                  onPressed: () {
                    _searchController.clear();
                    _filterVideos('');
                  },
                ),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.brown, width: 2.0),
                  borderRadius: BorderRadius.circular(12.0),
                ),
                enabledBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.brown, width: 1.0),
                  borderRadius: BorderRadius.circular(12.0),
                ),
              ),
              onChanged: (value) {
                // Filter the video list based on the search query
                _filterVideos(value);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomNavigationBar() {
    return BottomNavigationBar(
      items: const [
        BottomNavigationBarItem(
          icon: Icon(Icons.explore),
          label: 'Explore',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.add),
          label: 'Add',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.library_books),
          label: 'Library',
        ),
      ],
      onTap: (index) {
        // Handle navigation to different pages here
        switch (index) {
          case 0:
            // Navigate to Explore Page
            print('Navigate to Explore Page');
            break;
          case 1:
            // Navigate to Add Page
            print('Navigate to Add Page');
            break;
          case 2:
            // Navigate to Library Page
            print('Navigate to Library Page');
            break;
          default:
            break;
        }
      },
    );
  }
}

class VideoCard extends StatelessWidget {
  final VideoModel video;
  final VideoPlayerController videoController;

  const VideoCard({
    super.key,
    required this.video,
    required this.videoController,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Handle video card tap (e.g., navigate to video details page)
      },
      child: Card(
        elevation: 4.0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(15.0),
        ),
        color: const Color(0xFF3F1F1F),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (videoController.value.isInitialized)
              AspectRatio(
                aspectRatio: videoController.value.aspectRatio,
                child: VideoPlayer(videoController),
              )
            else
              Container(
                height: 200,
                color: Colors.grey[300],
                child: const Center(
                  child: CircularProgressIndicator(),
                ),
              ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Title
                  Text(
                    video.title,
                    style: const TextStyle(
                      fontSize: 18.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.amber,
                    ),
                  ),

                  // Username
                  Row(
                    children: [
                      Icon(Icons.account_circle,
                          color: Colors.white, size: 16.0),
                      const SizedBox(width: 4),
                      Text(
                        video.username,
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),

                  // Views count
                  Row(
                    children: [
                      Icon(Icons.remove_red_eye,
                          color: Colors.white, size: 16.0),
                      const SizedBox(width: 4),
                      Text(
                        '${video.views}',
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),

                  // Days ago
                  Row(
                    children: [
                      Icon(Icons.access_time, color: Colors.white, size: 16.0),
                      const SizedBox(width: 4),
                      Text(
                        '${_calculateDaysAgo(video.datePosted)}',
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),

                  // Location
                  Row(
                    children: [
                      Icon(Icons.location_on, color: Colors.white, size: 16.0),
                      const SizedBox(width: 4),
                      Text(
                        video.location,
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),

                  // Category
                  Row(
                    children: [
                      Icon(Icons.label, color: Colors.white, size: 16.0),
                      const SizedBox(width: 4),
                      Text(
                        video.category,
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            ButtonBar(
              children: [
                ElevatedButton.icon(
                  onPressed: () {
                    // Handle star button action
                  },
                  icon: const Icon(Icons.star),
                  label: const Text('Star'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  String _calculateDaysAgo(DateTime datePosted) {
    final duration = DateTime.now().difference(datePosted);
    return '${duration.inDays} days ago';
  }
}
